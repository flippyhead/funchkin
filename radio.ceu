native _radioBegin();

#define RADIO_RX_LATITUDE 1
#define RADIO_RX_LONGITUDE 2

input (int, float, float, int) RADIO_RX; // id, latitude, longitude, heading
input (int, float, float, int) RADIO_TX; // id, latitude, longitude, heading

native do
  ##include <XBee.h>

  SoftwareSerial serial(2, 3);
  XBee xbee = XBee();

  XBeeResponse response = XBeeResponse();
  ZBRxResponse rx = ZBRxResponse();
  ModemStatusResponse msr = ModemStatusResponse();

  void radioBegin() {
    Serial.println("Radio start.");
    serial.begin(9600);
    xbee.setSerial(serial);
  }

  bool radioHasNewData() {
    return xbee.getResponse().isAvailable() &&
      xbee.getResponse().getApiId() == ZB_RX_RESPONSE;
  }

  String radioParseRxPayload() {
    String inData;
    char received;

    for (int i = 0; i < rx.getDataLength(); i++) {
      received = rx.getData()[i];

      if (received == '\n') {
        return inData;
      } else {
        inData += received;
      }
    }
  }
end

_radioBegin();

loop do
  _xbee.readPacket();

  if _radioHasNewData() then
    _xbee.getResponse().getZBRxResponse(_rx);

    _Serial.println(_radioParseRxPayload());

    async do
      // ** use _radioParseRxPayload() to extract:
      // var int id, heading;
      // var float latitude, longitude;
      // ** For example:
      // id = 1;
      // latitude =    47.613451;
      // longitude = -122.308730;
      // heading = 123;
      // ** get the data sent out via radio
      // emit RADIO_RX => (id, latitude, longitude, heading);
    end

  else/if _xbee.getResponse().isError() then
    _Serial.print("[radio] error reading packet: ");
    _Serial.println(_xbee.getResponse().getErrorCode());
  else
    // nothing / other errpr
  end

  await 500ms;
end