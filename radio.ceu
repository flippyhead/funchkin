native _radioBegin();

#define RADIO_RX_TIMEOUT 10 // seconds

native do
  ##include <XBee.h>
  #include "lib/SerialCommand.cpp"

  static const float LOC_DENOM = 1000000.0;

  SerialCommand serialCommand;
  XBee xbee = XBee();

  XBeeResponse response = XBeeResponse();
  ZBRxResponse rx = ZBRxResponse();
  ModemStatusResponse msr = ModemStatusResponse();

  ZBTxStatusResponse txStatus = ZBTxStatusResponse();

  // SH + SL Address of **receiving** XBee
  #if MY_FUNCHKIN_ID == 1
    XBeeAddress64 addr64 = XBeeAddress64(0x13A200, 0x40A5A082);
  #endif
  #if MY_FUNCHKIN_ID == 2
    XBeeAddress64 addr64 = XBeeAddress64(0x13A200, 0x40A5A01F);
  #endif

  char rxData[48];
  int rxID;
  float rxLatitude, rxLongitude;

  void radioSendMessage(char line[]) {
    #ifdef USE_SERIAL
      Serial.println(line);
    #else
      ZBTxRequest zbTx = ZBTxRequest(addr64, (uint8_t *)line, strlen(line));
      xbee.send(zbTx);
    #endif
  }

  void radioSendMessage(char message[], int num, ...) {
    char line[100];
    va_list argv;
    va_start(argv, num);
    vsprintf(line, message, argv);
    va_end(argv);
    radioSendMessage(line);
  }

  void radioCommandNotRecognized(const char *command) {
    radioSendMessage("[radio] Command not recognized.");
  }

  void radioCommandUpdateLocation() {
    char *arg, *token;
    arg = serialCommand.next();
    int part = 0;

    if (arg == NULL) return;

    while ((token = strsep(&arg, ","))) {

      switch (part) {
        case 0:
          rxID = atoi(token);
          break;
        case 1:
          rxLatitude = atol(token) / LOC_DENOM;
          break;
        case 2:
          rxLongitude = atol(token) / LOC_DENOM;
          break;
      }
      part = part + 1;
    }
  }

  void radioTransmitLocation(int id, float latitude, float longitude) {
    char line[82];
    long lat = (latitude * LOC_DENOM);
    long lon = (longitude * LOC_DENOM);
    sprintf(line, "LOC %d,%ld,%ld", id, lat, lon);
    radioSendMessage(line);
  }

  void radioBegin() {
    #ifdef USE_SERIAL
      // nope
    #else
      xbee.setSerial(Serial);
    #endif

    serialCommand.setDefaultHandler(radioCommandNotRecognized);
    serialCommand.addCommand("LOC", radioCommandUpdateLocation);
  }

  bool radioHasNewData() {
    return xbee.getResponse().isAvailable() &&
      xbee.getResponse().getApiId() == ZB_RX_RESPONSE;
  }

  void radioParseRxPayload(char buffer[]) {
    String inData;
    char received;

    for (int i = 0; i < rx.getDataLength(); i++) {
      received = rx.getData()[i];
      inData += received;
    }

    inData.toCharArray(buffer, rx.getDataLength() + 1);
  }

end

_radioBegin();

var int timeSinceLastRadioRx = 0; // seconds

par do
  loop do
    _xbee.readPacket();

    if _radioHasNewData() then
      _xbee.getResponse().getZBRxResponse(_rx);

      _radioParseRxPayload(_rxData);
      _serialCommand.readCommand(_rxData);

      timeSinceLastRadioRx = 0;

      async do
        emit RADIO_RX => (_rxID, _rxLatitude, _rxLongitude);
      end

    else/if _xbee.getResponse().isError() then
      _radioSendMessage("[radio] error reading packet: ", _xbee.getResponse().getErrorCode());
    else
      // nothing / other error
    end

    await 50ms;
  end
with
  loop do
    await 1s;
    timeSinceLastRadioRx = timeSinceLastRadioRx + 1; // second
    if timeSinceLastRadioRx > RADIO_RX_TIMEOUT then
      emit display_radio_rx_timeout;
    end
  end
end