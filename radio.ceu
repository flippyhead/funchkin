native _radioBegin();

input (int, float, float, int) RADIO_RX; // id, latitude, longitude, heading
input (int, float, float, int) RADIO_TX; // id, latitude, longitude, heading

native do
  ##include <XBee.h>
  #include "lib/SerialCommand.cpp"

  SerialCommand serialCommand;
  SoftwareSerial xbeeSerial(2, 3);
  XBee xbee = XBee();

  XBeeResponse response = XBeeResponse();
  ZBRxResponse rx = ZBRxResponse();
  ModemStatusResponse msr = ModemStatusResponse();
  char rxData[48];
  int rxID, rxHeading;
  float rxLatitude, rxLongitude;

  void radioCommandNotRecognized(const char *command) {
    Serial.println("[radio] Command not recognized.");
  }

  void radioCommandUpdateLocation() {
    char *arg, *token;
    arg = serialCommand.next();
    int part = 0;
    float denom = 1000000.0;
    if (arg == NULL) return;

    while ((token = strsep(&arg, ","))) {

      switch (part) {
        case 0:
          rxID = atoi(token);
          break;
        case 1:
          rxLatitude = atol(token) / denom; //(parse_degrees(token) / denom);
          break;
        case 2:
          rxLongitude = atol(token) / denom;
          break;
        case 3:
          rxHeading = atoi(token);
          break;
      }
      part = part + 1;
    }
  }

  void radioBegin() {
    Serial.println("Radio start.");
    xbeeSerial.begin(9600);
    xbee.setSerial(xbeeSerial);

    serialCommand.setDefaultHandler(radioCommandNotRecognized);
    serialCommand.addCommand("LOC", radioCommandUpdateLocation);
  }

  bool radioHasNewData() {
    return xbee.getResponse().isAvailable() &&
      xbee.getResponse().getApiId() == ZB_RX_RESPONSE;
  }

  void radioParseRxPayload(char buffer[]) {
    String inData;
    char received;

    for (int i = 0; i < rx.getDataLength(); i++) {
      received = rx.getData()[i];
      inData += received;
    }

    inData.toCharArray(buffer, rx.getDataLength() + 1);
  }

end

_radioBegin();

par do
  loop do
    _xbee.readPacket();

    if _radioHasNewData() then
      _xbee.getResponse().getZBRxResponse(_rx);

      _radioParseRxPayload(_rxData);
      _serialCommand.readCommand(_rxData);

      _Serial.print("[radio] Funchkin ");
      _Serial.print(_rxID);
      _Serial.print(" received location: ");
      _Serial.print(_rxLatitude, 6);
      _Serial.print(", ");
      _Serial.println(_rxLongitude, 6);

      async do
        emit RADIO_RX => (_rxID, _rxLatitude, _rxLongitude, _rxHeading);
      end

    else/if _xbee.getResponse().isError() then
      _Serial.print("[radio] error reading packet: ");
      _Serial.println(_xbee.getResponse().getErrorCode());
    else
      // nothing / other error
    end

    await 50ms;
  end
with
  loop do
    // if rxId then
    //   emit RADIO_RX => (rxId, latitude, longitude, heading);
    // end

    await 10s;
  end
end