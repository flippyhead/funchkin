#include "color.ceu"

native _displayBegin();

#define DISPLAY_PIN 5
#define DISPLAY_NUMPIXELS 16
#define DISPLAY_NEARBY_LIMIT 5 // meters
#define DISPLAY_CLOSEBY_LIMIT 20 // meters
#define DISPLAY_PADDING_BRIGHTNESS 50
#define TOP_LED 1
#define LED_OFFSET 0
#define MAX_DISTANCE 2000 // meters; approx. 6 miles (size of BRC city limits) == 9656 meters
#define STEPS 10

var int distance;
var int direction;

native do
  ##include <Adafruit_NeoPixel.h>

  Adafruit_NeoPixel display = Adafruit_NeoPixel(DISPLAY_NUMPIXELS, DISPLAY_PIN, NEO_GRB + NEO_KHZ800);
  int topLED = TOP_LED;
  int compassOffset = LED_OFFSET;

  int lastDir = 16;
  int lastDirLeft, lastDirRight;
  Color dirLED(0, 0, 255);

  // Input a value 0 to 255 to get a color value.
  // The colours are a transition r - g - b - back to r.
  uint32_t Wheel(byte WheelPos) {
    WheelPos = 255 - WheelPos;
    if(WheelPos < 85) {
      return display.Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    if(WheelPos < 170) {
      WheelPos -= 85;
      return display.Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
    WheelPos -= 170;
    return display.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }

  void displayBegin() {
    display.begin();
  }

  void displayDirection(int direction, int padding) {
    unsigned int ledDir = 0;
    int tempDir = 0;
    int offset, offsetDir;

    if ((direction > 348.75) || (direction < 11.25)) tempDir = topLED;

    for(int i = 1; i < 16; i++){
      float pieSliceCenter = 45/2*i;
      float pieSliceMin = pieSliceCenter - 11.25;
      float pieSliceMax = pieSliceCenter + 11.25;
      if ((direction >= pieSliceMin) && (direction < pieSliceMax)) {
        tempDir = topLED + i;
      }
    }

    if (tempDir > 15) {
      ledDir = tempDir - 16;
    }
    else if (tempDir < 0) {
      ledDir = tempDir + 16;
    }
    else {
      ledDir = tempDir;
    }

    ledDir = ledDir + compassOffset;
    if (ledDir > 15) ledDir = ledDir - 16;

    for (int i = 0; i < 16; ++i) {
      display.setPixelColor(i, display.Color(0, 0, 0));
    }

    for (int i = 0; i < padding; ++i) {
      if (i % 2) {offset = -1;} else {offset = 1;}

      offsetDir = ledDir + offset;
      if (offsetDir > 15) offsetDir = offsetDir - 16;
      if (offsetDir < 0) offsetDir = offsetDir + 16;

      display.setPixelColor(offsetDir,
        display.Color(
          DISPLAY_PADDING_BRIGHTNESS*dirLED.red/255,
          DISPLAY_PADDING_BRIGHTNESS*dirLED.green/255,
          DISPLAY_PADDING_BRIGHTNESS*dirLED.blue/255
        )
      );
    }

    display.setPixelColor(ledDir, display.Color(dirLED.red, dirLED.green, dirLED.blue));
    lastDir = ledDir;
    display.show();
  }

  void displayDirection(int direction) {
    displayDirection(direction, 0);
  }

  int displayDistance(int distance) {
    int shadesPerStep = 255 / STEPS;
    int metersPerStep = MAX_DISTANCE / STEPS;
    int currentStep = distance / metersPerStep;

    if (currentStep > 10) currentStep = 10;

    dirLED.red = 255 - shadesPerStep * currentStep;
    dirLED.green = 0;
    dirLED.blue = shadesPerStep * currentStep;
  }

  void displayColorWipe(uint32_t c) {
    for(uint16_t i=0; i < display.numPixels(); i++) {
      display.setPixelColor(i, c);
      display.show();
      delay(25);
    }

    for(uint16_t i=0; i < display.numPixels(); i++) {
      display.setPixelColor(i, 0);
      display.show();
      delay(25);
    }
  }

  void displayColorBlink(uint32_t c) {
    for(uint16_t i=0; i < display.numPixels(); i++) {
      if (i == lastDir) continue;
      display.setPixelColor(i, c);
      display.show();
    }
    delay(25);
    for(uint16_t i=0; i < display.numPixels(); i++) {
      if (i == lastDir) continue;
      display.setPixelColor(i, 0);
      display.show();
    }
  }

  void displayNearby() {
    for (int j=0; j < 255; j += 12) {
      for (int q=0; q < 3; q++) {
        for (int i=0; i < display.numPixels(); i=i+3) {
          display.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
        }
        display.show();
        delay(20);

        for (int i=0; i < display.numPixels(); i=i+3) {
          display.setPixelColor(i+q, 0);        //turn every third pixel off
        }
      }
    }
    for (int i=0; i < display.numPixels(); i=i+1) {
      display.setPixelColor(i, 0);
      display.show();
    }
  }
end

_displayBegin();

par do // startup, show once
  _displayColorWipe(_display.Color(255, 0, 0));
  _displayColorWipe(_display.Color(0, 255, 0));
  _displayColorWipe(_display.Color(0, 0, 255));
with
  loop do
    direction = await DISPLAY_DIRECTION;
    if distance < DISPLAY_CLOSEBY_LIMIT then
      _displayDirection(direction, 2);
    else
      _displayDirection(direction, 0);
    end
  end
with
  loop do
    distance = await DISPLAY_DISTANCE;
    _displayDistance(distance);
  end
with
  loop do
    distance = await DISPLAY_DISTANCE;
    if distance < DISPLAY_NEARBY_LIMIT then
      _displayNearby();
      _displayDistance(distance); // turn dir. back on
    end
    await 6s;
  end
with
  loop do
    await display_gps_age_warning;
    _displayColorBlink(_display.Color(25, 0, 0));
  end
with
  loop do
    await display_radio_rx_timeout;
    _display.setPixelColor(_lastDir, 0);
    _display.show();
    await 250ms;
    _display.setPixelColor(_lastDir, _display.Color(_dirLED.red, _dirLED.green, _dirLED.blue));
    _display.show();
  end
end