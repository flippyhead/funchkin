#include "arduino.ceu"
#include "funchkin.ceu"
#include "course.ceu"

#define MAX_FRIENDS 1
#define MY_ID 1

// My location and heading
var float latitude, longitude;
var int heading;

native do
  ##include <SoftwareSerial.h>

  struct Funchkin friends[MAX_FRIENDS];

  void begin() {
    Serial.begin(9600);
    Serial.println("Main start.");
  }

  void createFriends() {
    friends[0].id = 1;
    friends[0].latitude =  0.0;
    friends[0].longitude = 0.0;
    friends[0].heading = 0;
  }

  char direction(int dir) {
    if (dir == 0) {
      return 'F';
    } else if (dir == -2) {
      return 'B';
    } else if (dir == -1) {
      return 'R';
    } else if (dir == 1) {
      return 'L';
    }
  }

  void logMe(int heading) {
    Serial.println("-----------");
    Serial.print("My heading:"); Serial.println(heading);
  }

  void logFriends() {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      Serial.println("-----------");
      Serial.print("\nFriend "); Serial.print(friends[i].id); Serial.println(":");
      Serial.print("loc: "); Serial.print(friends[i].latitude, 6); Serial.print(", "); Serial.println(friends[i].longitude, 6);
      Serial.print("direction: "); Serial.println(direction(friends[i].direction));
      Serial.print("bearing: "); Serial.println(friends[i].bearing);
      Serial.print("distance: "); Serial.println(friends[i].distance);
    }
  }

  void updateFriend(int id, float latitude, float longitude, int heading) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      if (friends[i].id == id) {
        friends[i].latitude = latitude;
        friends[i].longitude = longitude;
        friends[i].heading = heading;
      }
    }
  }

  void updateCourses(float latitude, float longitude) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      int bearing = calculateBearing(friends[i].latitude, friends[i].longitude, latitude, longitude);
      float distance = calculateDistance(friends[i].latitude, friends[i].longitude, latitude, longitude);
      friends[i].bearing = bearing;
      friends[i].distance = distance;
    }
  }

  void updateDirections(int heading) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      int direction = calculateDirection(friends[i].bearing, heading);
      friends[i].direction = direction;
    }
  }

end

_begin();
_createFriends();

par do
  #include "compass.ceu"
with
  #include "gps.ceu"
with
  #include "radio.ceu"
with
  loop do
    var int fid, fheading;
    var float flatitude, flongitude;

    (fid, flatitude, flongitude, fheading) = await RADIO_RX;
    _updateFriend(fid, flatitude, flongitude, fheading);
  end
with
  loop do
    heading = await COMPASS_HEADING;
    _updateDirections(heading);
  end
with
  loop do
    (latitude, longitude) = await GPS;
    _updateCourses(latitude, longitude);
  end
with
  loop do
    // _radioTransmit();
    await 2s;
  end
with
  loop do
    await 1s;

    _logMe(heading);
    _logFriends();
  end
end