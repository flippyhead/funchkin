#define MY_FUNCHKIN_ID 1
#define MAX_FRIENDS 1
// #define CALIBRATE
// #define USE_SERIAL
// #define DEBUG
// #define SIMULATION

#include "arduino.ceu"
#include "funchkin.ceu"
#include "course.ceu"
#include "events.ceu"


// My location and heading
var float latitude, longitude;
var int heading;

native do
  ##include <SoftwareSerial.h>

  struct Funchkin friends[MAX_FRIENDS];

  static int distanceTiers[10] = {5, 10, 20, 40, 80, 160, 320, 640, 1280, 99999};

  void initFriends() {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      friends[i].id = 0;
      friends[i].latitude = 0;
      friends[i].longitude = 0;
    }
  }

  void updateFriend(int id, float latitude, float longitude) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      if (friends[i].id == 0) friends[i].id = id;

      if (friends[i].id == id) {
        friends[i].latitude = latitude;
        friends[i].longitude = longitude;
      }
    }
  }

  void begin() {
    Serial.begin(9600);
    initFriends();
    #ifdef SIMULATION
      updateFriend(1, 47.613645, -122.308781); // simulate update
    #endif
  }

  int calculateDistanceTier(int distance) {
    for (int i = 0; i < 9; i++) {
      if (distanceTiers[i] <= distance) continue;
      if (distanceTiers[i] >= distance) return i;
    }
    return -1; // should never reach here
  }

  void updateCourses(float latitude, float longitude) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      int bearing = calculateBearing(latitude, longitude, friends[i].latitude, friends[i].longitude);
      unsigned int distance = calculateDistance(latitude, longitude, friends[i].latitude, friends[i].longitude);
      friends[i].bearing = bearing;
      friends[i].distance = distance;
      friends[i].previousDistanceTier = friends[i].distanceTier;
      friends[i].distanceTier = calculateDistanceTier(distance);
    }
  }

  void updateDirections(int heading) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      friends[i].direction = calculateDirection(friends[i].bearing, heading);
    }
  }

end

_begin();

par do
  #ifdef CALIBRATE
    #include "compass-calibration.ceu"
  #else
    #include "compass.ceu"
  #endif
with
  #include "radio.ceu"
with
  #include "gps.ceu"
with
  #include "audio.ceu"
with
  #include "display.ceu"
with
  loop do
    var int fid;
    var float flatitude, flongitude;

    (fid, flatitude, flongitude) = await RADIO_RX;
    _updateFriend(fid, flatitude, flongitude);
  end
with
  loop do
    heading = await COMPASS_HEADING;
    _updateDirections(heading);

    async do
      emit DISPLAY_DIRECTION => _friends[0].direction;
    end
  end
with
  loop do
    (latitude, longitude) = await GPS;
    _updateCourses(latitude, longitude);

    if _friends[0].distanceTier != _friends[0].previousDistanceTier then
      var bool movingAway = (_friends[0].distanceTier > _friends[0].previousDistanceTier);
      emit audio_distance_tier_change => (_friends[0].distanceTier, movingAway);
    end

    async do
      emit DISPLAY_DISTANCE => _friends[0].distance;
    end
  end
with
  loop do
    (latitude, longitude) = await GPS;
    _radioTransmitLocation(MY_FUNCHKIN_ID, latitude, longitude);
    await 2s;
  end
#ifdef DEBUG
with
    loop do
      await 1s;

      _radioSendMessage("[me] location: %d, %d", 2, (int) latitude, (int) longitude);

      loop i in MAX_FRIENDS do
        _radioSendMessage("[friend %d] bearing: %d, distance: %d, direction: %d, tier: %d", 5,
          _friends[i].id, _friends[i].bearing, _friends[i].distance, _friends[i].direction, _friends[i].distanceTier);
      end
    end
#endif
end