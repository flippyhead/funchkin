#include "arduino.ceu"
#include "funchkin.ceu"
#include "course.ceu"
#include "events.ceu"

#define MY_FUNCHKIN_ID 1
#define MAX_FRIENDS 1
// #define USE_SERIAL
// #define DEBUG

// My location and heading
var float latitude, longitude;
var int heading;

native do
  ##include <SoftwareSerial.h>

  struct Funchkin friends[MAX_FRIENDS];

  void begin() {
    Serial.begin(9600);
  }

  void initFriends() {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      friends[i].id = 0;
      friends[i].latitude = 0;
      friends[i].longitude = 0;
    }
  }

  void updateFriend(int id, float latitude, float longitude) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      if (friends[i].id == 0) friends[i].id = id;

      if (friends[i].id == id) {
        friends[i].latitude = latitude;
        friends[i].longitude = longitude;
      }
    }
  }

  void updateCourses(float latitude, float longitude) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      int bearing = calculateBearing(latitude, longitude, friends[i].latitude, friends[i].longitude);
      unsigned int distance = calculateDistance(latitude, longitude, friends[i].latitude, friends[i].longitude);
      friends[i].bearing = bearing;
      friends[i].previousDistance = friends[i].distance;
      friends[i].distance = distance;
    }
  }

  // bool updateProgressTier() {
  //   unsigned long distance, previousDistance;
  //   int distanceTier;
  //   distance = friends[i].distance;
  //   previousDistance = friends[i].previousDistance;
  //   distanceTier = friends[i].previousDistance;

  // }

  void updateDirections(int heading) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      friends[i].direction = calculateDirection(friends[i].bearing, heading);
    }
  }

end

_begin();

par do
  #include "compass.ceu"
with
  #include "radio.ceu"
with
  #include "gps.ceu"
with
  #include "display.ceu"
with
  loop do
    var int fid;
    var float flatitude, flongitude;

    (fid, flatitude, flongitude) = await RADIO_RX;
    _updateFriend(fid, flatitude, flongitude);
  end
with
  loop do
    heading = await COMPASS_HEADING;
    _updateDirections(heading);

    async do
      emit DISPLAY_DIRECTION => _friends[0].direction;
    end
  end
with
  loop do
    (latitude, longitude) = await GPS;
    _updateCourses(latitude, longitude);

    async do
      var int fdistance = _friends[0].distance;
      emit DISPLAY_DISTANCE => fdistance;
    end
  end
with
  loop do
    (latitude, longitude) = await GPS;
    _radioTransmitLocation(MY_FUNCHKIN_ID, latitude, longitude);
    await 2s;
  end
#ifdef DEBUG
with
    loop do
      await 1s;

      _radioSendMessage("[me] location: %d, %d", 2, (int) latitude, (int) longitude);

      loop i in MAX_FRIENDS do
        _radioSendMessage("[friend %d] bearing: %d, distance: %lu, direction: %d", 4,
          _friends[i].id, _friends[i].bearing, _friends[i].distance, _friends[i].direction);
      end
    end
#endif
end