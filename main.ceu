#include "arduino.ceu"
#include "funchkin.ceu"
#include "course.ceu"

#define MAX_FRIENDS 1


// My location and heading
var float latitude, longitude;
var int heading;

native do
  struct Funchkin friends[MAX_FRIENDS];

  void createFriends() {
    friends[0].id = 1;
    friends[0].latitude = 45.2591;
    friends[0].longitude = -111.2546;
    friends[0].heading = 123;
  }

  char direction(int dir) {
    if (dir == 0) {
      return 'F';
    } else if (dir == -2) {
      return 'B';
    } else if (dir == -1) {
      return 'R';
    } else if (dir == 1) {
      return 'L';
    }
  }

  void logFriends() {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      Serial.print("\nFriend "); Serial.print(friends[i].id); Serial.println(":");
      Serial.print("direction: "); Serial.println(direction(friends[i].direction));
      Serial.print("bearing: "); Serial.println(friends[i].bearing);
      Serial.print("distance: "); Serial.println(friends[i].distance, 6);
    }
  }

  void updateFriend(int id, float latitude, float longitude, int heading) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      if (friends[i].id == id) {
        friends[i].latitude = latitude;
        friends[i].longitude = longitude;
        friends[i].heading = heading;
      }
    }
  }

  void updateCourses(float latitude, float longitude) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      int bearing = calculateBearing(friends[i].latitude, friends[i].longitude, latitude, longitude);
      int distance = calculateDistance(friends[i].latitude, friends[i].longitude, latitude, longitude);
      friends[i].bearing = bearing;
      friends[i].distance = distance;
    }
  }

  void updateDirections(int heading) {
    for (int i = 0; i < MAX_FRIENDS; i++) {
      int direction = calculateDirection(friends[i].bearing, heading);
      friends[i].direction = direction;
    }
  }

end

_createFriends();

par do
  #include "gps.ceu"
with
  #include "compass.ceu"
with
  #include "radio.ceu"
with
  loop do
    var int id, heading;
    var float latitude, longitude;
    (id, latitude, longitude, heading) = await RADIO_RX;

    _updateFriend(id, latitude, longitude, heading);
  end
with
  loop do
    heading = await COMPASS_HEADING;
    _updateDirections(heading);

    // _Serial.print("\nMy Heading: ");
    // _Serial.println(heading);

  end
with
  loop do
    (latitude, longitude) = await GPS;
    _updateCourses(latitude, longitude);

    _Serial.print("\nGPS: ");
    _Serial.print(latitude, 4); _Serial.print(", ");
    _Serial.println(longitude, 4);
  end
with
  loop do
    _logFriends();
    await 5s;
  end
end